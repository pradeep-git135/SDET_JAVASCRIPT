 node js : nodeJs is a wraper written on top of plane_javascript to perform server side programming

webdriverJs : default selenium binding is webdriverJS

webdriverIo : it is a wrapper written on top of webdriverJS by using nodejs

javascript : 
  1) javascript is a scripting language (interpretation and execution occurs at run time)
  2) javascript is useed to develop an interactive webpages (dynamic web pages)
  3) javascript is mainly used for client side validation
  4) dynamically typed language (int a = 10;  var a = 10, var a = "pradeep")
  5) js is a case sensitive 
  

 browser can understand javascript bcz inbuilt has a translater 
 each and every indivisual browser has a specific translater 
for e.g chrome browser has an interpreter called v8
	mozillaFirefoox has spiderMonkey
	safari has javascript_core
	ie has chakra

javascript can be executed on 2 platforms:
 1) on the browser ==> any browser
	we can embed our javascript code in html
		2 different ways 
			1] inline embeding i.e, by using script tag (<script> </script>)  
			2] external embeding i.e, by using script tag with src attribute (<script src = "file path"> </script>)
2) off the browser ==> server side and we need nodeJs for it
	we will make use of node to execute our javascript code i.e, node <file name>


tokens: tokens are the smallest unit of javascript code 
	tokens are classified into:
		1] keywords : 
			keywords are programmer defined words i.e, already they have a prdefined meaning (e.g var, if, else, for, foreach, let, const)	       
		2] identifiers:
			user defined words or named memory blocks (e.g var x = 10, y = "string")
			it may be combination of alfanumeric but it shouldn't start with numeric i.e, a2 = 20,==> valid   2a = 20 ==> invalid 
			_ and $ we can use 
		3] literals:
			literals are the values that we store inside the memory
		4] operators: 
			symbol used to perform mathematical operations (=, ==, <, >, /, +)
		5] separetors:
			are the symbols used to separate the code (e.g (,), {, }, ; [,])

datatypes in javascript:
2 types 
 1) premitive 
 2) non premitive 
premetive datatypes:
	1] number datatype
	2] string
	3] boolean
	4] null
	5] undefined 
non premitive 
1] objects 
2] functions
3] array
4]math
5]date

FUNCTIONS : it is block of code which perform a specific task, advantage reuseability
how to create a function in javascript:
 there are differnt ways of creating a function in javascript
 1] standard function/function declaration:
	syntax: 
		function nameOfFunction (n_parameters) {statement block }

 2] function expression:

	syntax: 
		var nameOfFunction  = function (n_parameters) {statement block }

anonymous functions = function without names

 3] iif/ immidietly invocable function:
	(function (n_parameters) {statement block })()

 4] arrow functions:
	var fxn1 = () => {}

*callback function:
	passing a referece of one function as an argument in another funtion
	 and executing/invoking in it is called callback function
	 
*closure property of a function	:
	inner function still having an access on the variable that had been declared on the outer function 
	even after the execution of outer function

#objects:
	any entity having states/properties and behavior/functions is called an object

there are many ways of creating an object in javascript:
1] creating an object by object literal syntax:
	var objname = {property1 : value1, property2 : value3,.........property n : value n}

2] creating an object by using constructor function:

	function FunctionName(prop1, prop2, prop3....){
		this.prop1 = prop1
		this.prop2 = prop2
		this.prop3 = prop3
	}
 var obj = new FunctionName(value1, value2, value3.....)

if you need to modify the properties of a construterFunction we have to make use pf 'prototype' keyword

prototype : each and every object in javascript had a property called prototype and the prototype proprty
can only accessed by an object taht had been created from constructor function

3] crating an object by using object.create() method (it is an es6 feature):
	syntax: 
		object.create(obj_refeence)
*)by default object.create(obj_refeence) will return you an empty object with prortotype of inheritted object
	
*) each and every object in javascript is derived from base object(Object)

4] creating an object by using class:
 class Person  {
	constructor (prop1, prop2,....) {
		this.prop1 = prop1
		this.prop2 = prop2
	}
}
var p1 = new Person(value1, value2.....)

#] __proto__ [double_underscore proto double_underscore]:
 it's a keyword used to inherit the properties from one object to other

javascript fallows prototypel inheritance:
	prototypel inheritance: each and every object in javascript is derived from base object(Object)

#] programm execution in memory:
	refer image

#] this keyword:
	the value of this keyword depends on the area from where we used it
		

#] inbuilt functions in javascript:

1)call() 2) bind() 3) apply()

1) call():
	it's an inbuilt method in javascript, it can used along with functions, it will accept object_reference as a mandetory parameter
	and it will set the value for this keyword and it will execute the function
2] bind():
	it's an inbuilt method in javascript, it can used along with functions, it will accept object_reference as a mandetory parameter
	and it will create a separate copy of the function and set the value for this keyword and it will return the function
3] apply():
	it is similer to call() but the only difference is while passing the arguments it will accept only in array format


#] array in javascript:
	to declare an array in javascript:
		2 ways:
			1) using new Array keyword:	
				var arrayName = new Array()  // it is not preferable

			2] var arraayNmae = [value1, value2, ......., valuen]

*] predefined objects o javascript:
	1] Array
	2] String
	3] Date
	4] Math

1] Array:
	#)properties:
		arrayNmae.length ; returns the number of elements present in the given array
	#)array methods:
	1)array.concat(new_array) ==> Combines two or more arrays. This method returns a new array without modifying any existing arrays.
	2)arry.every()
	3)array.some()
	4)array.push()
	5)array.unshift()
	6)array.pop()	
	7)arrayshift()
	8)array.splice()
	9)array.indexof()
	10)array.lastindexof()
	11)array.forEach()
	12)array.map()
	13)array.filter()
	14)array.sort()
	15)array.reduse()
	16)array.reduseRight()
	17)array.toString()
	18)array.slice()
	19)array.reverse()
	
2] String :
	properties:
		1]length
	methods:
		1) str.index()
		2) str.lastIndex()
		3) str.charAt()
		4) str.charcadeat()
		5) str.localCompare()
		6) str.replace()
		7) str.slice()
		8) str.split()
		9) str.substring()
		10) str.startwith()
		11) str.trim()
		12) str.substr()
		13) str.endsWith()
		14) str.concat()
		15) str.repeat()

3] Date object:
	we have to create an instaence of Date_object inorder to access the properties of a date object
	
	var refName = new Date();

4] math object:
		Math.properties

*]setTimeout():
 	syntax:
	 setTimeout(()=>{}, timeunit in ms)
		it will accept 2 parameters one is callback function and the other is time uniit in miliSeconds
		it will execute the given callback function once after the specified time
*]setInterval():
	syntax:
	 setinterval(()=>{}, timeunit in ms)
		it will accept 2 parameters one is callback function and the other is time uniit in miliSeconds
		it will execute the given callback function repeatedly after the specified time


*) es6 features:[ecma_script_6 features]
	javascript developers had introdused few additional features to enhance the functionality and those 
	featuers are called es6 features

es6 features:
1] let_var_const keywords:[variable declared by var keyword won't had scope limit, but variable declared by let, const keyword  had scope limit]
	block scoping
	var => variable declared by using var keyword can access anywhere in the file and value of variable can be overrided with/without using var keyword
	let => variable declared by using let keyword can access only within the scope that had been used and value of variable can be overrided, without using letkeyword
	const => variable declared by using let keyword can access only within the scope that had been used and value of variable can't be overrided

2]object and array destructuring:
		
	objectDestructuring: deriving/extracting the properties from an object and assinging it to a variable is called objectDestructuring
	syntax:
		var {property1, property2} = objRef

	arrayDestructuring: deriving/extracting the elements from an array and assinging it to a variable is called arrayDestructuring: 
	syntax:
		var [element1, element2] = arrayRef

3] rest and spread operator:(...)
	rest => return type is an array, rest can be used along with variable name(e.g ...varName)
	spread => return type is elements of an array, spread can be used only with arrayRef(e.g ...arrayRef)

4]template literals:
	backtic string (``) and template literal (${refName})
	e.g var a = "any name"
		console.log(`the value inside the variable is ${a} `)
5]promise :
	it has 3 statuses resilve, reject, pending
	syntax :
		var promise = new Promise((resolve, reject)=>{
				statements when to invoke resolve 
				and when to invoke reject
			       })
		promise.then((msg)=>{console.log(msg)}).catchc((msg)=>{console.log(msg))

	*) promiseChaining:
		sequential execution of the promises one after the other is called promise chaining(building connection b/w the promises )
		Promise.all([promise1, promise2, promise3........, promiseN]).then((msg)=>{log(msg)})

	*) promiseRace:
		it will execute the fastest resolved or rejected promise
		promise.race([promise1, promise2, promise3........, promiseN]).then((msg)=>{log(msg)})
	
6] async and await:
		ref image javascriptcallStack.png and promise.js files

 









	

